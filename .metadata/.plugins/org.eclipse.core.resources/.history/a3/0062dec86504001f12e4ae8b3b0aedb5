package com.microservice.userservice.service.impl;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.microservice.userservice.entity.Hotel;
import com.microservice.userservice.entity.Rating;
import com.microservice.userservice.entity.User;
import com.microservice.userservice.exception.ResourceNotFoundException;
import com.microservice.userservice.external.services.HotelService;
import com.microservice.userservice.external.services.RatingService;
import com.microservice.userservice.repository.UserRepository;
import com.microservice.userservice.service.UserService;

@Service
public class UserServiceImpl implements UserService {

	@Autowired
	UserRepository userRepository;

	@Autowired
	RestTemplate restTemplate;

	@Autowired(required = true)
	HotelService hotelService;
	
	@Autowired(required = true)
	RatingService ratingService;

	@Override
	public User createUser(User user) {
		String userId = UUID.randomUUID().toString();
		user.setUserId(userId);
		return userRepository.save(user);
	}

	@Override
	public User getUser(String userId) {
		User user = userRepository.findById(userId)
				.orElseThrow(() -> new ResourceNotFoundException("User not found with given id"));
		String url = "http://RATING-SERVICE/ratings/users/" + userId;
		Rating[] forObject = restTemplate.getForObject(url, Rating[].class);
		List<Rating> ratingsOfUser = Arrays.asList(forObject);
		ratingsOfUser.forEach(rating -> {
			ResponseEntity<Hotel> forEntity = restTemplate
					.getForEntity("http://HOTEL-SERVICE/hotels/" + rating.getHotelId(), Hotel.class);
			Hotel hotel = forEntity.getBody();

			// Hotel hotel = hotelService.getHotel(rating.getHotelId());
			rating.setHotel(hotel);
		});
		user.setRatings(ratingsOfUser);

		return user;

	}

	@Override
	public List<User> getAllUser() {
		 List<User> allUsers = userRepository.findAll();
		 allUsers.forEach(user->{
			 List<Rating> allRatings = ratingService.getAllRatingsByUserId(user.getUserId());
				allRatings.forEach(rating ->{
					Hotel hotel = hotelService.getHotel(rating.getHotelId());
					rating.setHotel(hotel);
				});
				user.setRatings(allRatings);
		 });
		
		 return allUsers;
	}

	@Override
	public User updateUser(User user, String userId) {
		User userFound = this.getUser(userId);
		userFound.setName(user.getName());
		userFound.setEmail(user.getEmail());
		userFound.setAbout(user.getAbout());
		return userRepository.save(userFound);

	}

}
